// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

enum MovieListType {
  FAVORITE
  HM
  QUEUE
}

enum TokenType {
  AUTH
}

enum UserRole {
  PLEB
  ADMIN
}

model User {
  id                 Int            @id @default(autoincrement())
  username           String         @unique
  hashed_password    String
  role               UserRole       @default(PLEB)  
  slack_user_id      String?
  tokens             Token[]
  list_entries       ListEntry[]
}

model ListEntry {
  movie        Movie    @relation(fields: [movie_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  movie_id     Int
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id      Int
  type         MovieListType
  order        Int
  ranking      Ranking  @relation(fields: [ranking_slug], references: [slug], onDelete: Restrict, onUpdate: Cascade)
  ranking_slug String

  @@id(name: "list_entry_id", fields: [movie_id, ranking_slug, user_id])
  @@unique([user_id, ranking_slug, type, order])
}

model Ranking {
  slug            String      @id
  name            String      @unique
  description     String?
  is_ordered      Boolean
  favorites_max   Int?        // null for no max, 0 to exclude this type
  hms_max         Int?        // null for no max, 0 to exclude this type
  min_year        Int?
  max_year        Int?
  list_entries    ListEntry[]
}

model Token {
  id           String      @id @default(uuid())
  created_at   DateTime    @default(now())
  user         User        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id      Int
  type         TokenType   @default(AUTH)
}

model Movie {
  id              Int             @id
  created_at      DateTime        @default(now())
  title           String
  release_date    DateTime        @db.Date
  poster_path     String?
  list_entries    ListEntry[]
}

